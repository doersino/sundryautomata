# Hello! This is the configuration for sundryautomata. It's written in
# ConfigObj's "unrepr" dialect, which basically means that the values of the
# key-value pairs observe the usual Python semantics.


[GENERAL]

# This option steers how talkative sundryautomata is on the command line. If set
# to "quiet", only errors are output. If set to "verbose", status messages are
# printed as well. If set to "deafening", all kinds of debugging information is
# printed, too. Should you be planning to run the bot as a cronjob or similar, I
# recommend the "quiet" setting, while "deafening" is well-suited for testing.
verbosity = "verbose"

# If not set to None, whatever would be printed in the "deafening" output mode
# will be written to this file as well. This log is not autorotated – so it'll
# grow to fill your hard drive on an infinite time scale.
logfile = "sundryautomata.log"

# Path where the result image will be stored. You can use the following
# variables (some of which are directly derived from the config options
# described further down) in your filename:
# | variable       | example value       |
# | -------------- | --------------------|
# | {datetime}     | 2020-08-13T16.11.28 |
# | {rule}         | 30                  |
# | {seed}         | 1597324847699057000 |
# | {living_color} | r100g120b140        |
# | {dead_color}   | r0g255b0            |
# Note 1: sundryautomata doesn't delete old images, so given enough time, the
# set of images will grow to fill your hard drive – but specifying a constant
# filename (i.e. not using any of the variables) ensures that only the most
# recent image is kept in the file system at all times.
# Note 2: Make sure to supply an absolute path here – otherwise it will be
# interpreted relative to the current working directory, which is not what you
# want when running ærialbot via cron or something like that.
# Note 3: The file extension must be kept as ".png".
image_path_template = "sundryautomata-{datetime}-rule{rule}-s{seed}-{living_color}-{dead_color}.png"

# Image dimensions in pixels. 900×900 px is the maximum such that Twitter
# doesn't convert to JPEG.
image_width = 900
image_height = 900


[TWITTER]

# Information required for posting to Twitter using its OAuth 1a authentication
# method. Check out the following website for an explanation of how to generate
# these keys/tokens/secrets for your Twitter account:
# https://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/
# Note: If any of these four values is set to None, Twitter posting will be
# disabled, but the result images will still be generated as configured.
consumer_key = None
consumer_secret = None
access_token = None
access_token_secret = None

# The text of each tweet. You can use the {rule} variable here.
tweet_text = "Rule {rule}"


[MASTODON]

# Information required for posting to Mastodon. Go to your bot account's
# settings, "Development", "New Application", decide on an application name and
# select the "write:media" and "write:statuses" scopes (and unselect everything
# else just in case), click "Submit", then click on the newly created
# application's name – you'll find the access token there.
# Note: If any of these two values is set to None, Mastodon posting will be
# disabled, but the result images will still be generated as configured.
api_base_url = "https://botsin.space"
access_token = ""

# The text of each toot. You can use the {rule} variable here.
toot_text = "Rule {rule}"
